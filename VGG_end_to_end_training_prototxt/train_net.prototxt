name: "FinetuneVGGNet_TwoStream_Train"
####################### data layer ########################
layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "/#Your Direction#/ilsvrc12/imagenet_mean.binaryproto"
  }
  image_data_param {
    source: "/#Your Direction#/single_body1_train_16.txt"
    batch_size: 64
    shuffle: false 
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "data_1"
  type: "ImageData"
  top: "data_1"
  top: "dummy_label_1"
  transform_param {
    mirror: true
    crop_size: 227
    mean_file: "/#Your Direction#/ilsvrc12/imagenet_mean.binaryproto"
  }
  image_data_param {
    source: "/#Your Direction#/single_body2_train_16.txt"
    batch_size: 64
    shuffle: false 
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "silence_1"
  type: "Silence"
  bottom: "dummy_label_1"
}
####################### stream 0 ########################
layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}
layer {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "reshape5"
  type: "Reshape"
  bottom: "pool5"
  top: "pool5_reshape"
  reshape_param {
    shape {
      dim: 0
      dim: -1
      dim: 1
      dim: 1
    }
  }
}

####################### stream 1 ########################
layer {
  bottom: "data_1"
  top: "conv1_1_1"
  name: "conv1_1_1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1_1"
  top: "conv1_1_1"
  name: "relu1_1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1_1"
  top: "conv1_2_1"
  name: "conv1_2_1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2_1"
  top: "conv1_2_1"
  name: "relu1_2_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_2_1"
  top: "pool1_1"
  name: "pool1_1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1_1"
  top: "conv2_1_1"
  name: "conv2_1_1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1_1"
  top: "conv2_1_1"
  name: "relu2_1_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1_1"
  top: "conv2_2_1"
  name: "conv2_2_1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2_1"
  top: "conv2_2_1"
  name: "relu2_2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_2_1"
  top: "pool2_1"
  name: "pool2_1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2_1"
  top: "conv3_1_1"
  name: "conv3_1_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1_1"
  top: "conv3_1_1"
  name: "relu3_1_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1_1"
  top: "conv3_2_1"
  name: "conv3_2_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2_1"
  top: "conv3_2_1"
  name: "relu3_2_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_2_1"
  top: "conv3_3_1"
  name: "conv3_3_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3_1"
  top: "conv3_3_1"
  name: "relu3_3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_3_1"
  top: "pool3_1"
  name: "pool3_1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool3_1"
  top: "conv4_1_1"
  name: "conv4_1_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1_1"
  top: "conv4_1_1"
  name: "relu4_1_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1_1"
  top: "conv4_2_1"
  name: "conv4_2_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2_1"
  top: "conv4_2_1"
  name: "relu4_2_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_2_1"
  top: "conv4_3_1"
  name: "conv4_3_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3_1"
  top: "conv4_3_1"
  name: "relu4_3_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_3_1"
  top: "pool4_1"
  name: "pool4_1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool4_1"
  top: "conv5_1_1"
  name: "conv5_1_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1_1"
  top: "conv5_1_1"
  name: "relu5_1_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1_1"
  top: "conv5_2_1"
  name: "conv5_2_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2_1"
  top: "conv5_2_1"
  name: "relu5_2_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_2_1"
  top: "conv5_3_1"
  name: "conv5_3_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3_1"
  top: "conv5_3_1"
  name: "relu5_3_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_3_1"
  top: "pool5_1"
  name: "pool5_1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
#################### reshape is the same to caffenet
layer {
  name: "reshape5_1"
  type: "Reshape"
  bottom: "pool5_1"
  top: "pool5_reshape_1"
  reshape_param {
    shape {
      dim: 0
      dim: -1
      dim: 1
      dim: 1
    }
  }
}
##############################################################

layer {
  name: "concat_all"
  type: "Concat"
  bottom: "pool5_reshape"
  bottom: "pool5_reshape_1"
  top: "cat_all"
  concat_param {
    axis: 1 # 0 for num and 1 for channels
  }
}

##############################################################

layer {
  name: "fc6_RelationN"
  type: "InnerProduct"
  bottom: "cat_all"
  top: "fc6"
  # lr is set to higher, since layer starts from random while others are pretrained
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
#layer {
#  name: "drop6"
#  type: "Dropout"
#  bottom: "fc6"
#  top: "fc6"
#  dropout_param {
#    dropout_ratio: 0.5
#  }
#}
layer {
  name: "fc7_RelationN"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  # lr is set to higher, since layer starts from random while others are pretrained
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
#layer {
#  name: "drop7"
#  type: "Dropout"
#  bottom: "fc7"
#  top: "fc7"
#  dropout_param {
#    dropout_ratio: 0.5
#  }
#}
layer {
  name: "fc8_RelationN"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  # lr is set to higher, since layer starts from random while others are pretrained
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
###############################################
layer {
  name: "probs"
  type: "Softmax"
  bottom: "fc8"
  top: "probs"
  #include: { phase: TEST }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}
layer {
  name: "acc"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "acc"
}
